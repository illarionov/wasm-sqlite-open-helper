/*
 * Copyright 2024, the wasm-sqlite-open-helper project authors and contributors. Please see the AUTHORS file
 * for details. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 * SPDX-License-Identifier: Apache-2.0
 */

package ru.pixnews.wasm.sqlite.open.helper.host.filesystem.linux

import assertk.all
import assertk.assertThat
import assertk.assertions.containsOnly
import assertk.assertions.isNotNull
import kotlinx.io.files.Path
import platform.posix.close
import ru.pixnews.wasm.sqlite.open.helper.host.filesystem.model.BaseDirectory
import ru.pixnews.wasm.sqlite.open.helper.host.filesystem.model.FileMode
import ru.pixnews.wasm.sqlite.open.helper.host.filesystem.op.opencreate.Open
import ru.pixnews.wasm.sqlite.open.helper.host.filesystem.op.opencreate.OpenFileFlags
import ru.pixnews.wasm.sqlite.open.helper.host.filesystem.posix.base.PosixFileSystemState
import ru.pixnews.wasm.sqlite.test.utils.TempFolder
import ru.pixnews.wasm.sqlite.test.utils.absolutePath
import ru.pixnews.wasm.sqlite.test.utils.assertions.FileModeBit
import ru.pixnews.wasm.sqlite.test.utils.assertions.fileMode
import ru.pixnews.wasm.sqlite.test.utils.assertions.isEmpty
import ru.pixnews.wasm.sqlite.test.utils.assertions.isRegularFile
import kotlin.test.AfterTest
import kotlin.test.BeforeTest
import kotlin.test.Test

class LinuxOpenTest {
    lateinit var tempFolder: TempFolder

    @BeforeTest
    fun setup() {
        tempFolder = TempFolder.create()
    }

    @AfterTest
    fun cleanup() {
        tempFolder.delete()
    }

    @Test
    fun create_file_with_absolute_path_should_work() {
        val fsState = PosixFileSystemState()
        val linuxOpen = LinuxOpen(fsState)

        val tempFileAbsolutePath = tempFolder.absolutePath()
        val testFile = Path(tempFileAbsolutePath, "file.test")

        val request = Open(
            path = testFile.toString(),
            baseDirectory = BaseDirectory.None,
            flags = OpenFileFlags(OpenFileFlags.O_CREAT or OpenFileFlags.O_WRONLY),
            mode = FileMode(0b111_000_000U),
        )

        val newFd = linuxOpen.invoke(request).getOrNull()?.let {
            close(it.fd)
        }

        assertThat(newFd).isNotNull()
        assertThat(testFile).all {
            isRegularFile()
            isEmpty()
            fileMode().containsOnly(FileModeBit.USER_READ, FileModeBit.USER_WRITE, FileModeBit.USER_EXECUTE)
        }
    }
}
